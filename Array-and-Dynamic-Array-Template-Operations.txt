//Operations / Usage of the array

//Java
// "static void main" must be defined in a public class.
public class Main {
    public static void main(String[] args) {
        // 1. Initialize
        int[] a0 = new int[5];
        int[] a1 = {1, 2, 3};
        // 2. Get Length
        System.out.println("The size of a1 is: " + a1.length);
        // 3. Access Element
        System.out.println("The first element is: " + a1[0]);
        // 4. Iterate all Elements
        System.out.print("[Version 1] The contents of a1 are:");
        for (int i = 0; i < a1.length; ++i) {
            System.out.print(" " + a1[i]);
        }
        System.out.println();
        System.out.print("[Version 2] The contents of a1 are:");
        for (int item: a1) {
            System.out.print(" " + item);
        }
        System.out.println();
        // 5. Modify Element
        a1[0] = 4;
        // 6. Sort
        Arrays.sort(a1);
    }
}


//C++
#include <iostream>

int main() {
    // 1. Initialize
    int a0[5];
    int a1[5] = {1, 2, 3};  // other element will be set as the default value
    // 2. Get Length
    int size = sizeof(a1) / sizeof(*a1);
    cout << "The size of a1 is: " << size << endl;
    // 3. Access Element
    cout << "The first element is: " << a1[0] << endl;
    // 4. Iterate all Elements
    cout << "[Version 1] The contents of a1 are:";
    for (int i = 0; i < size; ++i) {
        cout << " " << a1[i];
    }
    cout << endl;
    cout << "[Version 2] The contents of a1 are:";
    for (int& item: a1) {
        cout << " " << item;
    }
    cout << endl;
    // 5. Modify Element
    a1[0] = 4;
    // 6. Sort
    sort(a1, a1 + size);
}


//JavaScript
// 1. Initialize
let a0 = new Array(5);
let a1 = [1, 2, 3];

// 2. Get Length
console.log("The size of a1 is: " + a1.length);
console.log("The size of a0 is: " + a0.length);

// 3. Acces Element
console.log("The first element in a1 is: " + a1[0]);
console.log("The second element in a0 is: " + a0[1]);

// 4. Traverse arrays / iterate over all elements
console.log("[Version 1] The contents of a1 are:");
for (let i = 0; i < a1.length; ++i) {
	console.log(" " + a1[i]);
};

console.log("[Version 2] The contents of a0 are:");
for (let element of a0) {
	console.log(" " + element);
};

console.log("[Version 3] The contents of a1 are:" + a1.map(item => " " + item).join(""));

// 5. Modify Element
a1[0] = 4;

// 6. Sort
a1.sort((a, b) => a - b);



Notes:

In C++ and Java, arrays are homogeneous and statically typed. You declare and initialize them with a fixed data type and size, and they can only hold elements of that specific data type.

In JavaScript, arrays are dynamic and can hold elements of different data types. You can create arrays without specifying a fixed data type or size, and they can grow or shrink as needed to accommodate the elements you add or remove.



Dynamic Array:

JavaScript arrays are all dynamic, while arrays in C++ and Java are fixed-size data structures, meaning you need to specify the size of the array when you declare it, and you cannot change the size of the array once it's created.

As we mentioned in the previous article, an array has a fixed capacity and we need to specify the size of the array when we initialize it. Sometimes this will be somewhat inconvenient and wasteful.

Therefore, most programming languages offer built-in dynamic array which is still a random access list data structure but with variable size. For example, we have vector in C++ and ArrayList in Java.


//Java
// "static void main" must be defined in a public class.
public class Main {
    public static void main(String[] args) {
        // 1. initialize
        List<Integer> v0 = new ArrayList<>();
        List<Integer> v1;                           // v1 == null
        // 2. cast an array to a vector
        Integer[] a = {0, 1, 2, 3, 4};
        v1 = new ArrayList<>(Arrays.asList(a));
        // 3. make a copy
        List<Integer> v2 = v1;                      // another reference to v1
        List<Integer> v3 = new ArrayList<>(v1);     // make an actual copy of v1
        // 4. get length
        System.out.println("The size of v1 is: " + v1.size());
        // 5. access element
        System.out.println("The first element in v1 is: " + v1.get(0));
        // 6. iterate the vector
        System.out.print("[Version 1] The contents of v1 are:");
        for (int i = 0; i < v1.size(); ++i) {
            System.out.print(" " + v1.get(i));
        }
        System.out.println();
        System.out.print("[Version 2] The contents of v1 are:");
        for (int item : v1) {
            System.out.print(" " + item);
        }
        System.out.println();
        // 7. modify element
        v2.set(0, 5);       // modify v2 will actually modify v1
        System.out.println("The first element in v1 is: " + v1.get(0));
        v3.set(0, -1);
        System.out.println("The first element in v1 is: " + v1.get(0));
        // 8. sort
        Collections.sort(v1);
        // 9. add new element at the end of the vector
        v1.add(-1);
        v1.add(1, 6);
        // 10. delete the last element
        v1.remove(v1.size() - 1);
    }
}



//C++
#include <iostream>

int main() {
    // 1. initialize
    vector<int> v0;
    vector<int> v1(5, 0);
    // 2. make a copy
    vector<int> v2(v1.begin(), v1.end());
    vector<int> v3(v2);
    // 3. cast an array to a vector
    int a[5] = {0, 1, 2, 3, 4};
    vector<int> v4(a, *(&a + 1));
    // 4. get length
    cout << "The size of v4 is: " << v4.size() << endl;
    // 5. access element
    cout << "The first element in v4 is: " << v4[0] << endl;
    // 6. iterate the vector
    cout << "[Version 1] The contents of v4 are:";
    for (int i = 0; i < v4.size(); ++i) {
        cout << " " << v4[i];
    }
    cout << endl;
    cout << "[Version 2] The contents of v4 are:";
    for (int& item : v4) {
        cout << " " << item;
    }
    cout << endl;
    cout << "[Version 3] The contents of v4 are:";
    for (auto item = v4.begin(); item != v4.end(); ++item) {
        cout << " " << *item;
    }
    cout << endl;
    // 7. modify element
    v4[0] = 5;
    // 8. sort
    sort(v4.begin(), v4.end());
    // 9. add new element at the end of the vector
    v4.push_back(-1);
    // 10. delete the last element
    v4.pop_back();
}


//JavaScript
// 1. Initialize
let v0 = []; // An empty array
let v1 = [0, 1, 2, 3, 4]; // An array with elements

// 2. Make a copy
let v2 = v1.slice(); // Shallow copy of v1
let v3 = v1.slice(); // Shallow copy of v1

// 3. Access length
console.log("The size of v1 is: " + v1.length);

// 4. Access element
console.log("The first element in v1 is: " + v1[0]);

// 5. Iterate the array
console.log("[Version 1] The contents of v1 are:" + v1.join(" "));
console.log("[Version 2] The contents of v1 are:" + v1.join(" "));

// 6. Modify element
v2[0] = 5;
console.log("The first element in v1 is: " + v1[0]);
v3[0] = -1;
console.log("The first element in v1 is: " + v1[0]);

// 7. Sort
v1.sort((a, b) => a - b);

// 8. Add new elements at the end of the array
v1.push(-1);
v1.splice(1, 0, 6);

// 9. Delete the last element
v1.pop();
